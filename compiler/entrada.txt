













fn saludo(){
    println!("Hola mundo!!!");
    let mut a: i64 = 3;
    let mut b: i64 = 3;
    println!("la suma es : {}",a+b);
}




fn suma(n1: i64, n2: i64) -> i64{
    println!("la suma es: {}", n1+n2);
    println!("La resta es: {}", n1-n2);
    return 0;
}


fn sumaRetorno(n1: i64, n2: i64) -> i64{
    return n1+n2;
}



fn main() {
    saludo();

    let mut var1 = 6;
    suma(var1 - 2,3);
    println!("despues de la funcion suma");

    let mut var1 = 6;
    println!("{}",sumaRetorno(var1 - 2,3));
    println!("despues de la funcion suma");
}



















fn main(){
    // paso 1    
    struct Carro {
        placa : String,
        color : String
    }

    // paso 2 construir un struct
    // paso 3 guardar en una variable

    let mut c1 = Carro {placa:"090pl0", color:"gris"};
    println!("{}", c1.placa);
    println!("{}", c1.color);

    c1.placa = "NUEVA PLACA";
    c1.color = "cafe".to_string(); 
    println!("{}", c1.placa);
    println!("{}", c1.color);
}












fn main(){
    // si lo crea 
    // creacion de los modelos de los struct

    struct Carro{
        motor: String,
        cilindraje: i64
    }

    struct Persona{
        nombre: String,
        anios: i64,
        carro_: Carro
    }


    //asignacion 
    // = bildStruct 


    let mut persona = Persona{
        nombre: "Mike".to_string(),
        anios: 15,
        carro_: Carro {
            motor: "Grande".to_string(),
            cilindraje: 1500
        }
    };


    let mut c1 : Carro = Carro{motor: "Grande".to_string(),cilindraje: 1500};


    println!("{}", persona.nombre);
    println!("{}", persona.anios);
    println!("{}", persona.carro_.motor);
    println!("{}", persona.carro_.cilindraje);

}









fn main(){
	struct Chasis{
	    material: String
	}
	
	struct Carro{
	    marca: String,
	    modelo: String,
	    chasis: Chasis
	}
	
	struct Persona{
	    nombre: String,
	    anios: i64,
	    carro: Carro
	}
	
	let varx = 3;
	let mut vary = 0;
	let mut varz = 1;
	while vary <= varx {
	    println!("{}",vary);
	    if true{
	        if true{
	            if true{
	                while true{
	                    println!("^:)");
	                    if varz == 3{
	                        break;
	                    }
	                    varz = varz + 1;
	                }
	            }
	        }
	    }
	    varz = 1;
	    vary = vary + 1;
	}
	
	let mut persona = Persona{
	    nombre: "Mike".to_string(),
	    anios: 30,
	    carro: Carro{
	                marca: "Toyota".to_string(), modelo: "Tercel".to_string(), chasis: Chasis{material: "Aluminio".to_string()}
	         }
	};

	println!("{}",persona.carro.marca);
	println!("{}",persona.carro.marca);
	println!("{}",persona.carro.chasis.material);
	println!("{}",persona.carro.chasis.material);
}





















fn main() {
    let  a = [1,2,3] ;
    let mut b = [1,2,3,[6,4,[12,15]]] ;
    let mut c :[i64;2] = [1,2,3];


    println!("Antiguo valor es: {}", b[2]);
    println!("{}", b[3][1]);
    println!("{}", b[3][2][0]);


    b[2] = 33;
    b[3][1] = 100;
    println!("Nuevo valores es: {}",b[2]);
}





fn main() {
    let  a = [1,2,3] ;
    let mut b = [1,2,3,[6,4,[12,15]]] ;
    let mut c :[i64;2] = [1,2,3];


    println!("Antiguo valor es: {}", b[2]);

    let z = 33;

    b[2] = z;
    println!("Nuevo valores es: {}",b[2]);
}







fn main() {
    let arr = [1,2,3,4,5,6];
        
    for e in [0,1,2,3,4,5] {
        if (arr.len() > e) {
            println!("{},{},{},{},{},{}", arr[e]*e, arr[e]*e, arr[e]*e, arr[e]*e, arr[e]*e, arr[e]*e);
        }
    }
}




fn main() {
    let arr = [1,2,3,4,5,6];

    let i = 1;
    println!("{}", arr.len());
}



fn main() {
    let arr = [1,2,3,4,5,6];

    let i = arr.len();
}



fn main() {
    let arr = [1,2,3,4,5,6];
        
    for e in [0,1,2,3,4,5] {
        if (arr.len() > e) {
            println!("{}", arr[e]*e);
        }
    }
}







struct CentroTuristico {
    nombre:String
}

struct Carro {
    placa: String,
    color: String,
    tipo: String
}

struct Personaje {
    nombre: String,
    edad: i64,
    descripcion: String,
    carro_: Carro,
    numeros : StructArr
}


fn main() {

    println!("*******************VECTOR CON STRUCTS");
    
    let mut v: Vec<CentroTuristico> = Vec::new();

    v.push(CentroTuristico{nombre:"Volcan de pacaya".to_string()} );
    v.push(CentroTuristico{nombre:"Rio dulce".to_string()} );
    v.push(CentroTuristico{nombre:"Laguna Luchoa".to_string()} );

}























fn main() {
    let mut b = [1,2,3,[6,4,[12,15]]] ;


    println!("Antiguo valor es: {}", b[3][1]);
}





































// /* imprime los puntos por curso de cada estudiante */
fn imprimir_punteo(ests:  [String; 4], cursos:  [String; 3], notas:  [[[i64;5];3];4]) {
    let ponderacion: [String; 5] = ["1er parcial", "2do parcial", "3er parcial", "Lab", "Examen final"];
    println!("{}", ponderacion);
    println!("");
    for i in 0..(ests.len()) {
        println!("Estudinte: ");
        println!("{}", ests[i]);
        for j in 0..(cursos.len()) {
            let cad: String = "Curso: ".to_string() + (cursos[j]);
            println!("{}", cad);
            println!("{}", notas[i][j]);
        }
        println!("");
    }
}





// /* imprime la nota total por curso de cada estudiante*/
// /* parciales 43, lab sobre 32 y examen final 25*/
fn imprimir_nota_final(ests:  [String; 4], cursos:  [String; 3], notas:  [[[i64;5];3];4]) {
    for i in 0..(ests.len()) {
        for j in 0..(cursos.len()) {
            let mut nota_final: f64 = 0.0;
            for k in 0..(notas[i][j].len()) {
				let mut tmp: f64 = 0.0;
                    if k == (notas[i][j].len()) - 1 {
                        let efinal: f64 = 25.0 / 100.0;
                        tmp = ((notas[i][j][k]) as f64) * efinal;
                    } else if k == (notas[i][j].len()) - 2 {
                        let lab: f64 = 32.0 / 100.0;
                        tmp =((notas[i][j][k]) as f64) * lab;
                    } else {
                        let parcial: f64 = (43.0 / 3.0) / 100.0;
                        tmp =((notas[i][j][k]) as f64) * parcial;
                    }
				let nota: f64 = tmp;
                nota_final = nota_final + nota;
            }

            let cad: String = ests[i].clone().to_string() + " -> Curso: ".to_string() + (cursos[j]);
            println!("{}", cad);
            println!("{}", nota_final);
        }
        println!("");
    }
}




fn main() {
    let mut estudiantes: [String; 4] = ["Lorenza".to_string(), "Rosendo".to_string(), "Fermina".to_string(), "Markel".to_string()];

    let mut cursos: [String; 3] = ["Arqui1", "Archivos", "Compi2"];

    let mut notas_buenas: [[i64;5];3] = [
        [53,88,95,89,75],
        [81,51,57,67,93],
        [94,74,58,84,100]
    ];

    let mut notas: [[[i64;5];3];4] = [
        [[37,49,61,29,44],[56,60,51,68,70],[47,15,39,17,74]],
        [[69,74,52,34,36],[24,44,50,18,76],[74,60,32,63,78]],
        [[78,14,23,52,33],[28,79,77,55,24],[23,79,47,62,44]],
        [[73,53,11,49,52],[29,16,65,34,12],[72,69,30,44,37]]
    ];

  


    println!("\nImprimir nota final por curso y estudiantes\n");
    imprimir_nota_final( estudiantes, cursos, notas);

}